---
import Layout from '../../layouts/Layout.astro';
import { getCollection, type Stream, type Coin } from '../../lib/mongodb';

const coinsCollection = await getCollection<Coin>('coins');
const coins = await coinsCollection.find({}).toArray();

let success = false;
let error = '';

function generateStreamId(): string {
  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const digits = '0123456789';
  
  const part1 = letters[Math.floor(Math.random() * 26)] + letters[Math.floor(Math.random() * 26)];
  const part2 = digits[Math.floor(Math.random() * 10)];
  const part3 = Array.from({ length: 4 }, () => digits[Math.floor(Math.random() * 10)]).join('');
  
  return `${part1}-${part2}-${part3}`;
}

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const coinKey = formData.get('coinKey')?.toString() || '';
    const amount = parseFloat(formData.get('amount')?.toString() || '0');
    
    if (!coinKey || isNaN(amount) || amount <= 0) {
      error = 'Please fill all fields correctly';
    } else {
      const streamsCollection = await getCollection<Stream>('streams');
      
      // Generate unique stream ID
      let streamId = generateStreamId();
      let exists = await streamsCollection.findOne({ streamId });
      
      while (exists) {
        streamId = generateStreamId();
        exists = await streamsCollection.findOne({ streamId });
      }
      
      await streamsCollection.insertOne({
        streamId,
        coinKey,
        amount
      });
      
      success = true;
    }
  } catch (err) {
    error = 'Failed to create stream';
    console.error(err);
  }
}
---

<Layout title="Create Stream">
  <div class="max-w-2xl mx-auto">
    <h1 class="text-3xl font-bold mb-6">Create Stream</h1>
    
    {success && (
      <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
        Stream created successfully!
        <a href="/streams" class="ml-2 underline">View all streams</a>
      </div>
    )}
    
    {error && (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
        {error}
      </div>
    )}
    
    <div class="bg-white rounded-lg shadow p-6">
      <form method="POST">
        <div class="mb-4">
          <label class="block text-sm font-medium mb-2" for="coinKey">Coin</label>
          <select 
            id="coinKey" 
            name="coinKey" 
            required
            class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Select a coin</option>
            {coins.map(coin => (
              <option value={coin.key}>{coin.key} ({coin.coin})</option>
            ))}
          </select>
        </div>
        
        <div class="mb-6">
          <label class="block text-sm font-medium mb-2" for="amount">Amount</label>
          <input 
            type="number" 
            step="0.01"
            id="amount" 
            name="amount" 
            required
            placeholder="0.00"
            class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        
        <div class="flex gap-4">
          <button 
            type="submit"
            class="bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700"
          >
            Create Stream
          </button>
          <a 
            href="/streams"
            class="bg-gray-200 text-gray-800 py-2 px-4 rounded-lg hover:bg-gray-300"
          >
            Cancel
          </a>
        </div>
      </form>
    </div>
  </div>
</Layout>